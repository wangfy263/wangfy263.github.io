<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wang</title>
    <link>https://wangfy263.github.io/</link>
    <description>Recent content on Wang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn</language>
    <lastBuildDate>Tue, 12 Feb 2019 15:55:19 +0000</lastBuildDate>
    
	<atom:link href="https://wangfy263.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【转】Promise/A&#43;规范</title>
      <link>https://wangfy263.github.io/posts/promisea&#43;%E8%A7%84%E8%8C%83/</link>
      <pubDate>Tue, 12 Feb 2019 15:55:19 +0000</pubDate>
      
      <guid>https://wangfy263.github.io/posts/promisea&#43;%E8%A7%84%E8%8C%83/</guid>
      <description>这是一篇转自网络的Promise/A+规范的翻译，原文地址：https://segmentfault.com/a/1190000016411620
Promise/A+规范原文地址：https://promisesaplus.com/
记录在这里方便自己查阅参考:
翻译内容 一个标准声明、可操作的JavaScript Promise——出自开发者，为了开发者。
一个promise代表一个异步操作的最终结果。与promise交互的主要方法是通过它的then函数。这个函数注册一个回调函数来接收promise最终的值（value）或者是没有成功的原因（reason）。
这篇文档详细说明了then方法的具体行为，它为所有的符合Promise/A+规范的实现提供了一个基础的交互。像这样，这个规范应该设计的非常稳定。尽管Promise/A+组织可能偶尔通过一些向后兼容的小修改来调整这个文档来适应新发现的场景，我们只会在经历过了小心的思考、讨论和测试后增加大的、不向后兼容的修改。
从历史上来看，Promise/A+阐述了更早的Promise/A的行为规范，并且在其基础上进行了扩展，覆盖了一些实际行为和之前遗漏的问题。
最终，核心的Promise/A+文档不关心如何去创建、完成（resolve）或者拒绝（reject）一个Promise，而是聚焦在提供一个可交互的then函数。在将来的其他规范中可能会涉及这些没有提及的内容。
1. 术语 1.1. &amp;ldquo;promise&amp;rdquo;是一个对象或者函数，它拥有一个符合文档中描述行为的then方法。
1.2. &amp;ldquo;thenable&amp;rdquo;是一个有then方法的对象或者函数。
1.3. &amp;ldquo;value&amp;rdquo;是一个合法的JavaScript值（包括undefined, 一个thenable或者一个promise）。
1.4. &amp;ldquo;exception&amp;rdquo;是一个使用在throw语句中的抛出来的值。
1.5. &amp;ldquo;reason&amp;rdquo;是一个用来表示promise拒绝的原因的值。
2. 要求 2.1promise状态 一个promise必须处于一下三种状态：pending、fulfilled或者rejected。 2.1.1. 当处于pending状态时，promise：
2.1.1.1. 可能会转换成任何其他的状态。
2.1.2. 当处于fulfilled状态时，promise：
2.1.2.1. 禁止转换成其他状态。
2.1.2.2. 必须有一个无法更改的值。
2.1.3. 当处于rejected状态时，promise：
2.1.3.1. 禁止转换成其他状态。
2.1.3.2. 必须有一个无法更改的原因。
在这里，无法更改意味着全等（例如===），但是不代表深比较相等。
2.2 then方法 promise必须包含一个then方法来访问它当前或者最终的值或者原因。
Promise的then方法接收两个参数：
promise.then(onFulfilled, onRejected)  2.2.1. onFulfilled和onRejected函数有都有可选的参数：
2.2.1.1. 如果onFulfilled不是一个函数，那么它必须被忽略掉。
2.2.1.2. 如果onRejected不是一个函数，那么它必须被忽略掉。
2.2.2. 如果onFulfilled是一个函数：
2.2.2.1. 它必须在promise到fulfilled状态后触发，promise的值是它的第一个参数。
2.2.2.2. 它在一个promise到fulfilled状态之前禁止被触发。
2.2.2.3. 它禁止被触发多次。
2.2.3. 如果onRejected是一个函数：
2.2.3.1. 它必须在promise到rejected状态后触发，promise的原因是它的第一个参数。</description>
    </item>
    
    <item>
      <title>易问web版浏览器支持方案分析</title>
      <link>https://wangfy263.github.io/company/%E6%98%93%E9%97%AEweb%E7%89%88%E6%B5%8F%E8%A7%88%E5%99%A8%E6%94%AF%E6%8C%81%E6%96%B9%E6%A1%88%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 25 Jan 2019 15:30:12 +0000</pubDate>
      
      <guid>https://wangfy263.github.io/company/%E6%98%93%E9%97%AEweb%E7%89%88%E6%B5%8F%E8%A7%88%E5%99%A8%E6%94%AF%E6%8C%81%E6%96%B9%E6%A1%88%E5%88%86%E6%9E%90/</guid>
      <description>背景 易问.net向web迁移过程，需要考虑浏览器支持性的问题。支持不同的浏览器技术架构和实现方案也有所不同
现状 易问.net版有一部分用户仍然使用的是windows xp系统，而xp系统，IE浏览器最高只能支持到IE8。
   省份 总用户 xp用户     福建省 24957 1270   广西壮族自治区 33389 1116   江西省 25330 308   陕西省 21060 291   山东省 14466 242   山西省 9549 214   贵州省 4810 192   重庆电信 15117 191   云南省 15348 103   黑龙江电信 5939 98   吉林省 6458 94   内蒙古自治区 7952 87   辽宁省 6593 79   海南省 8553 78   河北省 24747 77   宁夏回族自治区 3459 77   甘肃省 6505 52   湖北省 6379 41   天津市 3552 41   青海省 4506 21   西藏自治区 3769 17   易问集团支撑项目组 170 10   四川省 714 7   北京市 2943 5   号百信息服务有限公司 80 0   河南省 2 0   翼支付 12 0   云公司 170 0    * 以上数据由@xucf(徐超凡)统计，感谢</description>
    </item>
    
    <item>
      <title>javascript异常总结</title>
      <link>https://wangfy263.github.io/unfinished/javascript%E5%BC%82%E5%B8%B8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 09 Jan 2019 16:24:37 +0000</pubDate>
      
      <guid>https://wangfy263.github.io/unfinished/javascript%E5%BC%82%E5%B8%B8%E6%80%BB%E7%BB%93/</guid>
      <description>写在前面 前端由于javascript特性，加上浏览器环境的复杂性，非常容易报错，又非常难以定位错误。最近在使用async/await语法时，捕获异常的部分总出问题。学习一下，在这里总结。
大纲： Error的基础
promise和async/await捕获异常方式
异常信息采集
参考文章：https://segmentfault.com/a/1190000017708563</description>
    </item>
    
    <item>
      <title>加密签名与解密验签总结</title>
      <link>https://wangfy263.github.io/posts/%E5%8A%A0%E5%AF%86%E7%AD%BE%E5%90%8D%E4%B8%8E%E8%A7%A3%E5%AF%86%E9%AA%8C%E7%AD%BE%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 08 Jan 2019 14:51:30 +0000</pubDate>
      
      <guid>https://wangfy263.github.io/posts/%E5%8A%A0%E5%AF%86%E7%AD%BE%E5%90%8D%E4%B8%8E%E8%A7%A3%E5%AF%86%E9%AA%8C%E7%AD%BE%E6%80%BB%E7%BB%93/</guid>
      <description>背景 近期在做后台管理系统中，需要与其他系统交换信息，需要做加密和数字签名，发现对这部分还不甚了解，做了一些功课，总结一下。
需求分析 应对场景是第三方系统与本系统进行数据交换时，确保数据传输过程没有被修改，并且由于在公网进行数据交换还必须保证交换数据中的敏感信息不能泄露。
 确保数据不被修改，可以采用数字签名方式，接收方需要对签名进行验签。 敏感信息部分进行加密 请求和响应都需要签名和加密 加密方式选择更安全的非对称加密方式（RSA）  基本设计方案 基本方案采用传统的签名验签流程 能力使用方持有私钥，能开平台持有公钥
签名验签流程： 实际使用中，每一个能力使用方，需要在能开平台录入公钥信息；
性能问题 由于进行的都是大数计算，使得RSA最快的情况也比DES慢上好几倍，无论是软件还是硬件实现。速度一直是RSA的缺陷。一般来说只用于少量数据加密。RSA的速度是对应同样安全级别的对称密码算法的1/1000左右。
因此当加密数据较大时，解密速率会严重影响交互性能。
优化设计方案&amp;ndash;应对大量数据加解密的性能问题 对大量数据采用性能更好的对称加密方式，使用非对称加密对密码进行加密，一起传递给接收方 公钥证书的安全问题 上面的流程在传输过程中已经可以确保信息不被修改，不泄露敏感信息。唯一还可能存在的信息泄漏问题在于接收方的公钥存在被替换的可能（获取公钥的过程，或者人为替换），那么以上所有的加密都没有意义了。
为了解决公钥的安全性问题，通常需要借助CA认证平台，进行公钥认证，获得“数据证书”。
优化设计方案&amp;ndash;数字证书方案 接入方需要把公钥在CA证书平台进行公证，拿到数字签名，同时，接受方需要获得CA平台的公钥。 总结： 数据加密、签名是保障安全性的基础，越是需要保障数据安全的场景，加密签名的流程越复杂。
附：常用加密算法 单秘钥密码（对称加密） 加密和解密使用相同密钥的加密算法。 优点：速度快，破译极其困难。适用于大量数据加密。 缺点：加密的安全性依靠密钥保管的安全性。
常用的对称加密算法是DES加密。
DES加密 DES算法在POS、ATM、磁卡及智能卡（IC卡）、加油站、高速公路收费站等领域被广泛应用 * DES的原始思想可以参照二战德国的恩尼格玛机，其基本思想大致相同。传统的密码加密都是由古代的循环移位思想而来，恩尼格玛机在这个基础之上进行了扩散模糊。但是本质原理都是一样的。现代DES在二进制级别做着同样的事：替代模糊，增加分析的难度。 * DES 使用一个 56 位的密钥以及附加的 8 位奇偶校验位（每组的第8位作为奇偶校验位），产生最大 64 位的分组大小。这是一个迭代的分组密码，使用称为 Feistel 的技术，其中将加密的文本块分成两半。使用子密钥对其中一半应用循环功能，然后将输出与另一半进行“异或”运算；接着交换这两半，这一过程会继续下去，但最后一个循环不交换。DES 使用 16 轮循环，使用异或，置换，代换，移位操作四种基本运算。
3DES加密 3DES是DES加密算法的一种模式，它使用3条64位的密钥对数据进行三次加密。3DES（即Triple DES）是DES向AES过渡的加密算法（1999年，NIST将3-DES指定为过渡的加密标准），是DES的一个更安全的变形。它以DES为基本模块，通过组合分组方法设计出分组加密算法。
AES加密 AES(Advanced Encryption Standard)：高级加密标准，是下一代的加密算法标准，速度快，安全级别高。AES算法基于排列和置换运算。排列是对数据重新进行安排，置换是将一个数据单元替换为另一个。AES使用几种不同的方法来执行排列和置换运算。AES是一个迭代的、对称密钥分组的密码，它可以使用128、192和256位密钥，并且用128位（16字节）分组加密和解密数据。
消息摘要 （唯一性） 一个消息摘要就是一个数据块的数字指纹。即对一个任意长度的一个数据块进行计算，产生一个唯一指印。 优点：唯一性，两个不同的报文难以生成相同的摘要 缺点：加密不可逆，难以而由数据指纹反推算出指定的摘要
常用的消息摘要有：美国国家标准技术研究所的 SHA1 和麻省理工学院 Ronald Rivest 提出的 MD5</description>
    </item>
    
    <item>
      <title>javascript实现继承的几种方式</title>
      <link>https://wangfy263.github.io/posts/javascript%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Mon, 31 Dec 2018 09:32:38 +0000</pubDate>
      
      <guid>https://wangfy263.github.io/posts/javascript%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
      <description>背景 近期的项目需要兼容IE8，很多ES5、ES6的属性无法使用；其中一部分用到了一些继承的思想，发现自己对js实现继承的几种方式理解还不够透彻，因此花了一晚上的时间，基于《javascript高级程序设计》和《javascript语言精粹》还有ES6的extends方法，重新梳理了所有的继承方式，以及他们的优缺点。
原型链继承 原型链继承，借助原型链，将父类的属性和方法共享给子类； 实现很简单：子类原型指向父类实例。
function SuperType(){ this.property = true; } SuperType.prototype.getSuperValue = function(){ return this.property; } function SubType(){ this.subproperty = false; } SubType.prototype = new SuperType(); var instance = new SubType();  instance可以访问到property属性和getSuperValue方法
缺点  父类中的属性是所有子类实例共享的，如父类中有引用类型，例如数组，那么其中一个子类实例修改了数组元素，会影响到所有的子类实例； 父类的属性是在父类实例化时已经确定，子类实例化时无法向父类够高函数传参；  借用构造函数 为了规避原型链继承的缺点，可以在子类构造函数中，借助父类的构造函数，把this指向子类构造函数
function SubType(){ SuperType.call(this) }  父类属性会随着构造函数被调用，加在子类的实例上（这样就不会出父类属性共享的问题，因为属性是子类实例自己的属性了）
new 这里的实现依据是new操作符的行为，当对构造函数执行new操作符时，行为如下(以new SubType()为例)：
var obj = {}; obj.__proto__ = SubType.prototype; SubType.call(obj); return obj;  缺点 只能继承属性，在原型链上的方法不可见。
组合继承 将原型链继承与借用构造函数继承组合在一起，既能共享原型链的属性，同时还能避免父类属性共享的问题。
function SuperType(){ this.property = true; } SuperType.</description>
    </item>
    
    <item>
      <title>javascript执行机制</title>
      <link>https://wangfy263.github.io/posts/javascript%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Thu, 13 Dec 2018 11:25:30 +0000</pubDate>
      
      <guid>https://wangfy263.github.io/posts/javascript%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/</guid>
      <description></description>
    </item>
    
    <item>
      <title>手动实现一个promise/A&#43;</title>
      <link>https://wangfy263.github.io/posts/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AApromise-a/</link>
      <pubDate>Mon, 03 Dec 2018 14:06:06 +0000</pubDate>
      
      <guid>https://wangfy263.github.io/posts/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AApromise-a/</guid>
      <description>开始 用了这么久Promise，今天突然想研究下Promise是怎么实现的，并且自己实现一个。
准备工作 既然要手动实现一个Promise,那么先看看我们经常使用的Promise是什么样子的；
使用样例 let promise = new Promise(function(resolve,reject){ resolve(&amp;#34;success&amp;#34;); }) promise.then(function(value){ }, function(reason){ })  从样例上看，Promise是一个构造函数，并且有一个参数excutor，这个参数是一个函数，也有两个函数作为参数，resolve和reject，resolve和reject是Promise内部的两个函数 then方法是原型链上的方法，接收两个入参（函数），这两个函数分别对应Promise的变更为resolve状态和reject状态后要执行的操作；
除了样例，我们还应该了解下Promise/A+规范。
Promise/A+规范 全文翻译：Promise/A+规范
Promise状态 一个promise必须处于一下三种状态：pending、fulfilled或者rejected。
 pending状态：promise可以转成fulfilled和rejected状态 fulfilled状态：promise的状态不可变更，并且必须有一个值，且这个值不能被改变； rejected状态： promise的状态不可变更，并且必须有一个原因，且这个原因不可改变；  then方法 promise必须包含一个then方法来访问它当前或者最终的值或者原因。 Promise的then方法接收两个参数：promise.then(onFulfilled, onRejected)
 onFulfilled和onRejected必须是一个函数； onFulfilled在promise到fulfilled状态后触发，promise的值是它的第一个参数。（onFulfilled只能触发一次，且在promise状态变成fulfilled之前不能触发） onRejected在promise到rejected状态后触发，promise的原因是它的第一个参数。（onRejected只能触发一次，且在promise状态变成rejected之前不能触发） then方法可能在相同的promise中被调用多次。onFulfilled和onRejected必须按照原有顺序进行调用执行；  这里先列举基础的部分；
promise实现&amp;mdash;part 1 从上面的信息我们可以模拟出Promise的基本结构
const PENDING = &amp;#34;pending&amp;#34;; const RESOLVED = &amp;#34;fulfilled&amp;#34;; const REJECTED = &amp;#34;rejected&amp;#34;; function Promise(excutor){ const that = this; that.status = PENDING; // 初始状态为pending  that.value = undefined; // 成功后的返回值  that.</description>
    </item>
    
    <item>
      <title>vue多页面&#43;history路由模式的nginx配置</title>
      <link>https://wangfy263.github.io/posts/vue%E5%A4%9A%E9%A1%B5%E9%9D%A2-history%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F%E7%9A%84nginx%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 06 Nov 2018 18:17:56 +0000</pubDate>
      
      <guid>https://wangfy263.github.io/posts/vue%E5%A4%9A%E9%A1%B5%E9%9D%A2-history%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F%E7%9A%84nginx%E9%85%8D%E7%BD%AE/</guid>
      <description>背景 在拼团购业务中，遇到基于vue的多页面配置+history路由模式的场景，需要在nginx下进行配置
多页面配置 多页面配置是指，在spa项目中，有些特殊的页面需要独立处理，例如特殊的业务，或者页面的缩放程度不同； 配置多页面后，在前端项目中不再是只有1个html，那么需要在部署时，对nginx进行特别处理；
history模式 vue-router默认是hash模式，同时也提供了history模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。
当使用 history 模式时，URL 就像正常的 url，例如 http://yoursite.com/user/id
所以，要在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面
nginx配置 如果多页面+history同时使用，该如何配置呢？
这是单页面的history模式的配置
location / { try_files $uri $uri/ /index.html; } 多页面的话就需要属于另一个页面的路由必须可以通过url识别出来，例如单页面路由/a开头，那么多页面可以是/b开头； 但是由于我们场景，这个前端应用已经有一个统一的上下文/y，因此属于新页面的路由设计为/y/new
这样通过nginx就可以把多页面的路由区分开，进而加载不同的页面；
配置如下：
location /y { try_files $uri $uri/ /index.html; } location ^~/y/new { try_files $uri $uri/ /index2.html; } 注意 匹配新路由的location优先级要高于匹配原路由的location，因此加了^~</description>
    </item>
    
    <item>
      <title>拼团购活动开发总结</title>
      <link>https://wangfy263.github.io/company/%E6%8B%BC%E5%9B%A2%E8%B4%AD%E6%B4%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 05 Nov 2018 14:24:07 +0000</pubDate>
      
      <guid>https://wangfy263.github.io/company/%E6%8B%BC%E5%9B%A2%E8%B4%AD%E6%B4%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</guid>
      <description> 背景 拼团购活动是山西移动电子渠道营销2018项目中一个重要的验收点，恰好在今年山西移动也策划了一次拼团购活动（由于与世界杯活动冲突，此需求被砍），需求组的同事已经出了设计方案，本次开发就是在需求组同事的设计方案上进行一些调整，与项目中已经完成的补调机制整合，并且独立出和生活APP应用；
原需求设计方案 http://eip.teamshub.com/t/3567906
原设计方案已经比较详细，大体的流程已经具备；不过有些细节没有明确，而且设计方案中也没有体现，这些是本次开发的重点：细化原需求，明确场景以及细节；
需求细化  明确次数限制是针对总人数的限制； 原需求中有参与次数的限制，经过讨论和确认，次数限制是针对参与活动的总人数进行限制（2w人次）每个档次的活动并不独立限制次数；并且，一旦成团即占据了参与人数； 明确由于余额变化导致的参团失败情况的处理； 由于无法做到余额预占，而活动参与到成团办理有一定的时间间隔，很容易出现参与时余额足够，成团后余额不足的情况； 经过讨论，这样的情况为用户保留办理资格，可通过界面进行补办（补调机制已经在电渠营销前台实现）； 明确限制次数可进行一定的冗余； 团购分为3人团和5人团，最终成团人数很有可能不是恰好2w人，当剩余2人时，不论下一个成团是3人还是5人都一定会超出； 经过讨论，可以接受1-4人的冗余；因此在成团前进行验证，只要成团前人数不足2w即可成团，而成团前一但人数超过2w即判定为参与活动失败； 每一个账号在同一时间最多只能在一个团中，只有成团后才能再次发起/参与拼团； 团购信息进行分享时，微信打开后引导用户拉起和生活APP进行访问，不提供H5直接访问界面；  细化方案 http://eip.teamshub.com/t/3738726
新数据模型 开发过程中遇到的问题&amp;amp;总结  前端多页面配置 @lihao_mios http://eip.teamshub.com/t/3768089 vue的history模式改造 @lihao_mios http://eip.teamshub.com/t/3768294 vue多页面场景+history路由模式下的nginx配置方案； @wangfy http://eip.teamshub.com/t/3770330 拼团购活动总结 @ hantao http://eip.teamshub.com/t/3769652 &amp;mdash;待补充  </description>
    </item>
    
    <item>
      <title>营销活动数据采集日志存储方案</title>
      <link>https://wangfy263.github.io/company/%E8%90%A5%E9%94%80%E6%B4%BB%E5%8A%A8%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E6%96%B9%E6%A1%88/</link>
      <pubDate>Fri, 02 Nov 2018 15:29:56 +0000</pubDate>
      
      <guid>https://wangfy263.github.io/company/%E8%90%A5%E9%94%80%E6%B4%BB%E5%8A%A8%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E6%96%B9%E6%A1%88/</guid>
      <description>山西移动电子渠道营销2018项目中，营销活动需要采集用户行为数据，目前采集方案已有，需要确定日志存放位置；
方案一：插码日志打印在和生活主机（8台）  好处：与和生活方案一致，网络策略已打通； 风险：需要改动和生活前端8台主机的nginx配置，为营销插码数据单独进行配置，改动风险较大；  方案二：营销活动插码日志打印在营销前台主机（3台，79/80/81）  好处：已经配置完成，可直接采集； 风险：需要打通网络；  方案三：插码日志统一打印在图片服务器主机上（8台）  好处：图片服务器没有系统应用，配置风险低；做好目录规划，后期山西分支插码可统一打印在一起； 风险：需要打通网络；  个人比较倾向于方案三，统一采集位置后，可对日志及配置进行统一管理；独立主机改造风险小；</description>
    </item>
    
    <item>
      <title>从开发一个vue组件深入理解vue的渲染机制</title>
      <link>https://wangfy263.github.io/posts/vue%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Fri, 12 Oct 2018 15:33:22 +0000</pubDate>
      
      <guid>https://wangfy263.github.io/posts/vue%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/</guid>
      <description>背景 近期在做一个前端推荐的组件，类似与各个APP打开时弹出的推荐效果，效果如下： 同时需要支持推荐多个，UED给出的效果图是类似轮播图的实现。 我需要将这个效果封装成一个独立的模块，提供给多个前端（和生活、营销）的多个位置使用（首页、营销活动页面。。）使用；
组件设计 在vue中，任何一个独立的UI模块都可以封装成（.vue）的组件；一般情况下，vue的组件都对应一个html自定义标签，在编译过程中，把组件模板替换到标签位置。但这种方式不适合当前的场景，推荐组件应该是一个全局组件，类似于alert的效果， 不需要设置html标签； 为了实现这种方式，需要先理解vue的组件是如何渲染的；
渲染机制 vue是将el或template字段传入的内容编译成渲染函数，渲染函数会把模板编译成虚拟DOM节点，同时每个渲染函数都对应一个观察者（watcher), watcher会监听每个数据的get和set操作，这样就实现了当数据修改时能同步渲染DOM树；
这里我们重点关注前半部分，也就是el转换为template，template生成渲染函数；
这部分的源码在src/platforms/web/entry-runtime-with-compiler.js中。
大致的实现是这样的： * 如果 template 选项不存在，那么使用 el 元素的 outerHTML 作为模板内容 * 如果 template 选项存在，且 template 的类型是字符串，有分两种情况： ** 如果第一个字符是 #，那么会把该字符串作为 css 选择符去选中对应的元素，并把该元素的 innerHTML 作为模板 ** 如果第一个字符不是 #，那么什么都不做，就用 template 自身的字符串值作为模板 * 如果 template 选项存在，且 template 的类型是元素节点(template.nodeType 存在)则使用该元素的 innerHTML 作为模板
我们项目中常用的单文件组件（.vue文件）会在打包时通过vue-loader直接编译成渲染函数；
这是通常我们组件的渲染流程，我们需要el作为挂载点把编译后的模板挂载在DOM树上；
如果要实现类似alert的效果，还不够！
$mount挂载函数 参考elementUI组件的设计，采用$mount函数实现异步挂载；
实际上在vue实例化的过程中，就是通过$mount函数进行模板编译的，我们前面讨论的渲染过程就是在完整版vue的$mount函数中进行的；
同时，$mount也是vue的实例方法，可通过vue的实例调用；
回到组件的设计： 1、组件本身是独立的vue实例，一个通过extend创建的Vue的‘子类’；
import Vue from &amp;#39;vue&amp;#39;; import Main from &amp;#39;./main.vue&amp;#39;; const RecommondConstructor = Vue.</description>
    </item>
    
    <item>
      <title>nginx配置踩坑--rewrite</title>
      <link>https://wangfy263.github.io/posts/nginx%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91-rewrite/</link>
      <pubDate>Wed, 05 Sep 2018 18:52:43 +0000</pubDate>
      
      <guid>https://wangfy263.github.io/posts/nginx%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91-rewrite/</guid>
      <description>问题 在协助部署吉林wap商城代码时，nginx配置出现一个问题； 通常前端框架的nginx配置如下：
location ~* \.(html|htm)$ { root /emallapp/Mobile_mall; etag off; if ($request_uri ~* &amp;#34;^/([^/]*)/([^/]*).html&amp;#34;) { set $appid $2; rewrite ^/([^/]*)/([^/]*).html /$2.html; } if ($request_uri ~* &amp;#34;^/([^/]*)/([^/]*)/([^/]*).html&amp;#34;) { set $appid $3; rewrite ^/([^/]*)/([^/]*)/([^/]*).html /$2.html; } index index.html index.htm; expires 1s; } 因为要增加上下文，需要在匹配html前先把上下文处理掉，否则资源文件无法找到：
locatio~^/mall/ { rewrite ^/mall/(.*)$ /$1 last; } 问题就出现在这里，增加了这段代码后，上面的html匹配不到了
原因 在nginx中， * $request_uri是初始的uri，并且不随rewrite变化 * $uri 是随rewrite变化的uri 而rewrite中，匹配的链接就是$uri 在上面的配置中，if条件的写法是正确的，而if条件体中rewrite这里出现了问题；
在没有处理上下文时，rewrite的写法是正确的，这也是导致我先入为主，认为配置是正确的； 但是，由于进行了上下文处理，rewrite后，uri已经发生了变化；
此时下面的rewrite中的正则表达式是改变后的$uri 因此正确的写法是这样：
location ~* \.(html|htm)$ { root /emallapp/Mobile_mall; etag off; if ($request_uri ~* &amp;#34;^/([^/]*)/([^/]*).</description>
    </item>
    
    <item>
      <title>fis发布过程给文件增加md5戳导致文件加载404异常问题分析解决</title>
      <link>https://wangfy263.github.io/company/fis%E5%8F%91%E5%B8%83%E8%BF%87%E7%A8%8B%E7%BB%99%E6%96%87%E4%BB%B6%E5%A2%9E%E5%8A%A0md5%E6%88%B3%E5%AF%BC%E8%87%B4%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD404%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Fri, 10 Aug 2018 15:32:11 +0000</pubDate>
      
      <guid>https://wangfy263.github.io/company/fis%E5%8F%91%E5%B8%83%E8%BF%87%E7%A8%8B%E7%BB%99%E6%96%87%E4%BB%B6%E5%A2%9E%E5%8A%A0md5%E6%88%B3%E5%AF%BC%E8%87%B4%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD404%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E8%A7%A3%E5%86%B3/</guid>
      <description>背景 昨晚与shenjb讨论fis发布过程中，增加为资源文件增加md5戳的配置后，生成的文件与编辑过程中引用的位置所加的md5戳不相同，导致访问时，文件找不到；
现象 当引入的js中使用模板引擎tpl时，就会出现md5戳不一致的情况，当js中不依赖tpl模板时，则不会出现这种现象
分析 拿到简易版工程运行，出现md5戳不一致的问题：如下图 可以看到经过编译后生成的login.js的md5戳，与html中引用的不一致；
fis的relase过程是先进行单文件编译，然后打包，最后生成文件；
找到fis的源码，在relase命令的入口，找到增加md5戳的位置： release命令的入口在fis\node_modules\fis-kernel\lib\release.js文件中
var res = ret.map.res[id] = { uri : file.getUrl(opt.hash, opt.domain), type : file.rExt.replace(/^\./, &amp;#39;&amp;#39;) }; 上面的代码中file.getUrl方法中会给当前文件增加md5戳，实际调用方法是file.getHash(),位于fis\node_modules\fis-kernel\lib\file.js中：
getHash : function(){ if(typeof this._md5 === &amp;#39;undefined&amp;#39;){ Object.defineProperty(this, &amp;#39;_md5&amp;#39;, { value : fis.util.md5(this.getContent()), writable : true }); } return this._md5; }, 这个方法根据文件的内容生成唯一的md5戳，内容有变化则md5戳也不同；
那么我们就把文件内容和md5戳都打印出来：
if (file.id === &amp;#34;portal-op-web-view/apps/serviceapps/login/js/login.js&amp;#34;) { console.log(&amp;#34;=============================&amp;#34;) console.log(file._content) console.log(file.getHash()) console.log(&amp;#34;=============================&amp;#34;) } var res = ret.map.res[id] = { uri : file.getUrl(opt.hash, opt.domain), type : file.</description>
    </item>
    
    <item>
      <title>营销活动规则配置VUE实现</title>
      <link>https://wangfy263.github.io/posts/%E8%A7%84%E5%88%99%E9%85%8D%E7%BD%AE%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Thu, 02 Aug 2018 18:16:47 +0000</pubDate>
      
      <guid>https://wangfy263.github.io/posts/%E8%A7%84%E5%88%99%E9%85%8D%E7%BD%AE%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1/</guid>
      <description>背景 山西移动电子渠道营销项目中，需要实现营销活动的可视化配置能力 其中一部分重点内容是如何实现活动规则的可视化配置；
功能描述  营销活动通常意味着需要条件，满足某些条件，才可以参加活动，这些条件我称之为“规则” 在营销能力提升项目中，需要在后台编辑营销活动时，同时给营销活动设置“规则”；发布至前台工程后，可根据后台配置的“规则”进行验证；   需求细化  此功能并不是针对某个营销活动，而是通用型的解决方案；“规则”要不断添加积累 已有“规则”需要支持各种排列组合； “规则”的编辑和修改需要实时生效，以应对营销活动的频繁变化；  界面设计 * 规则分为基础规则（必选规则），以及其他规则（可选规则） * 可选规则可动态添加删除 * 部分规则可重复添加 * 每个规则都需要进行输入验证 * 提交时要对所有规则进行验证
接口设计 前端设计重点 每个规则抽象为单独的VUE组件，需要在父组件中动态加载子组件； 动态组件可以通过 Vue 的 &amp;lt;component&amp;gt; 元素加一个特殊的 is 特性来实现：
&amp;lt;component v-bind:is=&amp;#34;currentTabComponent&amp;#34;&amp;gt;&amp;lt;/component&amp;gt; 在上述示例中，currentTabComponent 可以包括
 已注册组件的名字，或 一个组件的选项对象  如何获取界面上已经添加的组件 可以通过给子组件增加ref属性，为这个子组件赋予一个ID引用。
&amp;lt;base-input ref=&amp;#34;usernameInput&amp;#34;&amp;gt;&amp;lt;/base-input&amp;gt; 现在已经定义了这个 ref 的组件里，可以使用：
this.$refs.usernameInput 来访问这个 &amp;lt;base-input&amp;gt; 实例
通过这种方式，我们可以在添加组件是记录组件的ref，在提交验证时，通过记录的ref属性，找到页面上已经添加的子组件（规则组件）
for (let ref in refs) { // 查找页面中存在的子组件 if (Object.prototype.toString.call(refs[ref]) === &amp;#39;[object Object]&amp;#39;) { refs[ref].</description>
    </item>
    
    <item>
      <title>神经网络梯度下降训练模型</title>
      <link>https://wangfy263.github.io/unfinished/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sat, 28 Jul 2018 08:29:35 +0000</pubDate>
      
      <guid>https://wangfy263.github.io/unfinished/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/</guid>
      <description>先列个提纲，后续补充；
1、抽象数据模型：把训练模型抽象为由多个0-1之间的数值集合； 例如手写数字，抽象为784个像素点，每个像素点的值（0-1）表示该像素点的亮度；那么这一组像素点的数值就可以表示出手写数字的图形； 那么我们的训练数据就是每个手写数字对应这一组像素值集合；
2、设计隐含层：需要根据实际场景确认； 需要再看一遍视频
3、输出层就是0-9这10个数字
4、下一层节点数值计算，下一层每个节点的数值受到上一层没个节点的数值影响； 但上层的每个节点的影响程度不同，因此需要给上一层每个节点加一个权重值W（根据自己判断，先写一个）； 下层节点的值计算就是（W1A1+W2A2+&amp;hellip;WnAn）为了让这个值也处在0-1之间，需要给结果加一个sigmoid函数； 设置偏置值b，偏置值如何解释？ 最终，下层节点的计算方式是signoid(W1A1+W2A2+&amp;hellip;WnAn-b)
至此，我们可以根据上层节点的数值，以及偏置值来计算下层节点的每个值；
那么可以根据我们初始的设置的权重和偏置值，计算出0-9这10个数字对应的值，我们可以理解，越接近1是这个数字的可能越大
5、我们初始设置的权重w和偏置b，肯定不能准确的得出结果，那么我们需要通过计算反复的调整这些值； 编写公式的例子 $$ \sum_{i=0}^n i^2 = \frac{(n^2+n)(2n+1)}{6} $$
首先，</description>
    </item>
    
    <item>
      <title>和生活首页在部分机型下白屏原因分析</title>
      <link>https://wangfy263.github.io/company/%E9%A6%96%E9%A1%B5%E5%9C%A8%E9%83%A8%E5%88%86%E6%9C%BA%E5%9E%8B%E4%B8%8B%E7%99%BD%E5%B1%8F%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 16 Jul 2018 16:53:15 +0000</pubDate>
      
      <guid>https://wangfy263.github.io/company/%E9%A6%96%E9%A1%B5%E5%9C%A8%E9%83%A8%E5%88%86%E6%9C%BA%E5%9E%8B%E4%B8%8B%E7%99%BD%E5%B1%8F%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/</guid>
      <description> 问题 和生活首页在世界杯活动上线后，发现极个别iphone手机（1部iphone6plus、1部iphone7）首页出现白屏，但其他同事的iphone6plus、iphone7正常
问题分析 出现问题的两部手机分别是：iphone6plus（ios8.2）、iphone7（ios10.1.1）；其他同型号未出现问题的手机，系统均是ios11，因此推断是ios兼容性导致的问题；
ios8.2 借助mac系统的调试工具查看，发现在ios8下首页出现报错信息，信息显示不支持Class语法；
Class语法是ES6标准中新增的，在ios8并不支持；
查找错误信息所在位置，是swiper组件依赖的Dom7库；
swiper是首页改版时引入的新的轮播图插件，也就是说导致ios8，白屏的原因是swiper中有ES6的语法；
ios10.1.1 在swiper的github上找到关于ios10的issue issue中并没有给出具体的解决方案； 在framework7关于Dom7的issue中，找到： 确保您的webpack / babel还将导入的F7转换为ES5，并解析F7的节点模块
那么基本可以确认ios10.1.1也不支持ES6的语法；
查询一下: 可以看到，ES6的class语法是从ios10.3版本开始兼容的，ios10.1.1并不兼容该语法
与印象中不同，实际上几乎所有的ES6语法都是从ios10.3开始兼容的 解决方案 按照issue中所述的解决方案，只需要将ES6的语法转为ES5即可；
webpack中的babel插件默认是不会对node_modules下的文件进行转换的，因此需要显示的将swiper和dom7的文件进行转换 </description>
    </item>
    
    <item>
      <title>前端实现表格数据导出功能</title>
      <link>https://wangfy263.github.io/posts/%E5%89%8D%E7%AB%AF%E5%AF%BC%E5%87%BAcsv/</link>
      <pubDate>Mon, 25 Jun 2018 17:09:49 +0000</pubDate>
      
      <guid>https://wangfy263.github.io/posts/%E5%89%8D%E7%AB%AF%E5%AF%BC%E5%87%BAcsv/</guid>
      <description>将表格数据导出为文档是常见的功能需求，通常是借助后端来实现这个功能；
现在前端也可以直接导出文档了，CSV格式的文档；
CSV格式 CSV是comma separated values的缩写，是常用的数据文档格式之一，可以用excel文档等表格处理软件打开修改，但本质上是一个纯文本文件，格式相当简单：每一行数据为行，每一列数据由分隔符隔开。
先来试一下： 在sublime中输入如下文本，保存为test.csv 然后使用excel打开文档 果然可以! 那么导出时，只需要把数据转为纯文本，生成文件即可；
但由于CSV并未标准化，不同软件系统使用的行分隔符和列分隔符不一定相同，这为分析和转化增加了一些难度。再加上数据内容的格式（比如日期、金额等）会由不同的国家习惯和个人习惯造成不同，处理起来会有一些麻烦。
换行符 上面的图可以看出： * CSV文件格式单元格之间是通过,隔开的 * CSV文件格式里，换行是通过\n实现的
另外： * 在Windows系统中，标准模式采用的是\r\n匹配Enter键 * 在mac系统中，用\r匹配Enter键 * 在Linux系统中，用\n匹配Enter键
因此，我们只要把相应的数据按照,和\n分隔就可以了
json to csv 前端的数据通常都是json格式，因此我们要做的是把json格式的数据转为csv的字符串； 可以自己造轮子来实现，不过目前已有开源库实现了这些能力，建议直接拿来用； json2csv：https://github.com/zemirco/json2csv API我就不贴了，可以在github上找到；
下载 下载方式根据不同浏览器提供不同方式
download属性 *chrome、firefox、safari、opera*支持a标签的download属性，可以借助此属性实现下载； 在&amp;lt;a&amp;gt;标签的href属性上配置hrefElement.href = &#39;data:attachment/csv;charset=UTF-8,\ufeff&#39;+encodeURI(content);
\uFEFF是用来解决中文乱码的情况；
ie10/11和IEEdge ie10/11和ieEdge使用 Blob 和 msSaveBlob 以本地方式保存文件 使用 Blob()构造函数，我们首先创建一个 Blob 对象，其参数是包含所需文件内容的数组 const csvData = new Blob([BOM + text], { type: &#39;text/csv&#39; }) 调用msSaveBlob下载文件 navigator.msSaveBlob(csvData, filename)
ie9之前的版本 ie9及之前的版本不支持download属性，也没有Blob对象，需要其他方式实现
const oWin = window.</description>
    </item>
    
    <item>
      <title>jenkins&#43;Gitlab持续集成前端项目实践</title>
      <link>https://wangfy263.github.io/posts/jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Thu, 21 Jun 2018 08:56:48 +0000</pubDate>
      
      <guid>https://wangfy263.github.io/posts/jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/</guid>
      <description>安装插件 由于相关项目在gitLab上管理因此需要安装相关插件： Git plugin
GitLab Plugin Publish Over FTP NodeJS Plugin
部署jenkins的机器如果有网络可通过jenkins管理界面直接安装： 全局配置 git配置 在系统管理&amp;ndash;全局工具配置界面，配置git环境变量 Path to Git executable这里会从环境变量的配置中找git，找不到会提示： 填写完整路径也可以识别，但是在执行打包命令时会出现问题；
FTP配置 在系统管理&amp;ndash;全局工具配置界面，配置FTP信息，配置用于构建完成后执行FTP操作的主机； 邮件配置 配置邮件通知，当构建失败后，通知项目相关人员 nodejs配置 执行构建的命令需要借助nodejs 配置一个构建流程 新建任务选择，构建一个自由风格的软件项目 源码管理 源码管理采用Git 构建环境 构建 部署jenkins的机器是windows系统，因此这里选择执行windows批处理命令； 构建后操作 构建后操作有两步
收件人配置 FTP任务 配置完成，现在我在执行上线操作，只需要登录jenkins的选择指定的项目，执行构建即可，构建过程也可以在页面中看到； 来看看jenkins替代了多少操作： 1、从git上develop分支下载最新的代码； 2、执行构建操作，实际上就是执行npm run build 3、FTP到指定主机的指定目录；
实际上，jenkins可以做的更多；集成gitlab的插件，在gitlab中配置webhook后，回调jenkins执行持续集成，那么只要在指定分支上执行push操作后，就会自动执行持续集成操作；
山西现场由于网络原因，jenkins和gitlab部署的主机网络不通，gitLab回调无法请求到jenkins，只能作罢；
部署集成环境遇到的坑： 1、git要配置环境变量，否则执行构建时会提示找不到命令； 2、首次配置需要在jenkins下载的项目中，先执行npm install，安装好相关模块； 3、需要在jenkins中安装nodejs插件，否则即使主机上安装有nodejs和npm也无法执行npm命令</description>
    </item>
    
    <item>
      <title>可视化编辑系统实践</title>
      <link>https://wangfy263.github.io/posts/%E5%8F%AF%E8%A7%86%E5%8C%96%E7%BC%96%E8%BE%91%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 29 May 2018 18:42:19 +0000</pubDate>
      
      <guid>https://wangfy263.github.io/posts/%E5%8F%AF%E8%A7%86%E5%8C%96%E7%BC%96%E8%BE%91%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%B7%B5/</guid>
      <description>这篇我想写写可视化编辑系统的实践，重点在数据模型，静态化，工作流，预览等一系列系统功能的实践上，具体的可视化编辑功能，将另开一贴来介绍；
背景 前端工程中，有一些页面涉及运营位，根据市场的变化以及运营的要求，需要频繁的更迭，开发人员需要频繁的修改上线；由于生产环境的安全限制，手动上线费时费力，还需要走更多的流程（打申请，写文档，等审批），占用了大量的时间确不能产生多少价值；
CMS 传统的解决方案就是采用内容管理平台，运营人员通过CMS来修改，发布内容，包括文字，图片，表格等等一切想要发布的信息；CMS系统把数据和模板结合起来，静态化生成HTML页面或代码块，通过ftp协议上传到前端应用中，供项目使用；
CMS解决了2个问题： 1、没有技术门槛，运营人员可通过界面操作来修改运营位内容； 2、不需要手动上线，ftp一键上传；也省去了复杂的上线流程；
使用CMS系统，解放了开发人员一部分时间，迭代效率提升不少；
CMS系统已经向前迈了一大步，但仍存在不少问题： 1. 比较笨重，有一定的门槛，需要有一个熟练的操作人员； 2. CMS一般有复杂的数据结构，需要把每一个图片，文字都对应到一个数据库字段中；维护相对困难； 3. 有一些抽象概念（栏目、内容&amp;hellip;）；推广困难（用户有意向主动使用，但培训了多次，效果不佳，一直没有交出去） 4. 模板复用率低，一旦有结构型的变化，需要开发人员修改模板；
设计思路 最初的想法是复用CMS的数据结构，静态化的部分也可以复用；但这么做需要先把CMS的数据模型梳理出来，并且CMS本身不是前后端分离的架构，接口层需要重新开发；这样rest层需要针对不同的前端场景提供各种接口，多表关联的处理太多，rest层的开发将会非常复杂；还有，本次可视化的要求除了，编辑文字图片外，还要有“楼层”（首页的瀑布式结构）的处理（增加，删除，排序）甚至有“楼中楼”的情况，CMS的数据模型难以表达出楼层概念；
如果把每一个页面元素都和数据库对应起来的话，整个系统会显得非常笨重，耦合度非常高，难以扩展，前端和后端的都不灵活；因此我们考虑，数据库只存储必要的信息，不记录所有的前端元素，只记录编辑完成的结果；
前端编辑过程不和后端交互，编辑结束后，将最终的html代码段存储在数据库中，后端根据代码段来静态化生成页面，这样编辑的过程完全有前端工程去处理，这样更灵活也更轻量；
但是这样做有一个难点：当下一次来编辑时，需要依据html代码块还原成可编辑的模板；之前保存在数据库中的是html代码的字符串，要把它还原成可编辑的模板，非常麻烦；
为此，我们将可编辑的数据以一个json对象的形式存储在数据库中，下一次编辑时，前端通过json数据，结合VUE组件，渲染出可编辑界面；
具体的过程如下：  管理员访问后台编辑系统时，首先从数据库中查询出默认的json串，这个json串是初始化系统时录入的；前端根据json串，还原出可编辑界面； 管理员操作可编辑界面，前端记录修改，在保存时，把json串和html代码块一起存储在数据库中； 后端根据html代码块生成页面，并推送到前端工程使用； 管理员再次访问后台系统时，可根据json串，结合封装好的vue组件，把可编辑界面还原出来；（这个组件还用来实现了历史版本快照的功能）  除了记录一些页面的固有信息，只存储json数据和html代码块，json用作还原可视化编辑界面，html代码块用来静态化生成页面；
数据模型： id 主键 , name 生成页名称 , area_code 地市 , type 类型 1:首页 2:地市专项 , json json数据 , code html代码块 , create_time 创建时间 , update_time 更新时间 , update_login_no 更新操作工号 , status 状态(0：编辑完成，1：审批中，2：审批完成，-1：被打回，9：生效，-9：失效) , channels 发布渠道 , access_url 静态化页面路径, remark1 备用字段1 , remark2 备用字段2 , 工作流 根据用户的要求，可视化操作需要有审批流程，具体的审批流程是： 1、地市发布人员&amp;ndash;地市审批人员&amp;ndash;省公司审批人员 2、省公司发布人员&amp;ndash;省公司审批人员 并且，不同地市间，审批人员和发布人员不能交叉： 工作流系统采用，Activity工作流系统</description>
    </item>
    
    <item>
      <title>gitflow工作流程使用经验</title>
      <link>https://wangfy263.github.io/posts/gitflow%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/</link>
      <pubDate>Tue, 15 May 2018 21:13:21 +0000</pubDate>
      
      <guid>https://wangfy263.github.io/posts/gitflow%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/</guid>
      <description>背景： 公司一直使用svn做版本管控，项目一般只有两个分支，开发区和发布区，开发人员在开发过程中提交代码，然后在测试部署环境，测试通过后将代码同步至发布区，从发布区打包上线到生产环境；
前端项目现在多采用MVVM架构，每次上线需要全量打包，再加上多人协作的场景下，svn的管控模式已经难以满足复杂的场景；
先分析下问题所在：  开发人员多，每个人都在发布区提交代码，发布区的代码经常出现一更新就无法运行，只能先一一排错；同时测试环境沦为鸡肋，因为没有对应的稳定版本； 并行开发的版本多，同时有3个以上的需求在开发，但上线的时间并不一致，导致开发区的代码无法作为测试版本，只能由开发人员自己提交发布区，测试人员在发布区打包上线并测试；发布区沦为测试区； 前端项目无法增量上线，每次上线需要发布人全量打包，发布区版本由发布人员认为管控，上线日需要多次打包测试；  因此考虑引入Git作为版本管理工具，对开发上线流程进行管理；
Git的优点  由于是分布式，所有本地库包含了远程库的所有内容。 优秀的分支模型，打分支以及合并分支，极其方便。 快速，Git由于代码都在本地，打分支和合并分支及其快速  但即使是Git，没有一套规范约束，随着项目周期变长，参与人员变多，依旧会出现各种问题；
Gitflow 就像代码需要代码规范一样，代码管理同样需要一个清晰的流程和规范
Gitflow工作流通过为功能开发, 发布准备和维护分配独立的分支, 让发布迭代过程更流畅. 严格的分支模型也为大型项目提供了一些非常必要的结构.
Gitflow工作流没有用超出功能分支工作流的概念和命令, 而是为不同的分支分配一个很明确的角色, 并定义分支之间如何和什么时候进行交互. 主要分支:  Master(绿色): 主分支，保持稳定，不允许直接提交代码，只能从release分支和hotfix分支发起merge请求 Develop(橙色): 开发分支，相对稳定，代码优化以及功能性开发；  辅助分支:  Feature(蓝色): 开发新功能都从 develop 分支新建出来，完成后合并（merge）回 develop分支； Release(黄色): 准备要 release 的版本，只修改 bug。从 develop 分支出来，完成后 merge 回 master 和 develop Hotfix(灰色): 修复bug分支，等不及 release 版本就必须马上修复 master 赶上线的情况。会从 master 分支出来，完成后 merge 回 master 和 develop  在实际使用中，根据现场的情况，做了一些调整：
 master分支，有版本管理人员负责，每次上线需要对master分支打版本tag；master需要时刻和生产环境保持一致，合并master分支由1-2个管理员负责，开发人员不可以直接提交到master分支； develop分支，与测试环境保持一致；不在develop分支直接开发，尽可能以功能分支合并的形式更新develop分支，保证develop分支可用性；后期将加入持续集成，develop分支的稳定是持续集成的前提条件； feature分支，是开发人员主要开发的分支，建议按照功能点来新建分支，每个功能是一个分支，开发人员自测要在feature分支完成，自测通过后，在上线周期内merge到develop分支，提交由测试人员测试； 测试人员在测试环境测试出bug，指定开发人员需要基于develop新建release分支，开发人员在release分支修复bug，而后merge回develop分支，测试人员再进行测试； 测试人员测试通过后，将release分支merge到master分支，进行上线发布； 上线后，再次出现bug，需要开发人员在master分支基础上，新建hotfix分支，修复bug，修复后，merge到develop分支测试，测试通过后再merge到master分支，重新上线发布； 如果上线失败（出现未能解决的bug，或者因为用户层面的原因）发布人员从master分支回退到上一个tag版本，然后执行上线回退； release分支和hotfix分支在bug修复后要删除，下次修复新bug时再新建分支，修复bug需要在最新的分支版本上进行；  上图是我的分支列表，由于正在开发世界杯的相关功能，因此当前处在世界杯功能分支（feature/worldCup）,红色的部分是远程分支，可以看到feature分支有4个，对应的是正在开发的4个功能；</description>
    </item>
    
    <item>
      <title>基于vue的管理系统权限管控方案</title>
      <link>https://wangfy263.github.io/posts/%E5%9F%BA%E4%BA%8Evue%E7%9A%84%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%9D%83%E9%99%90%E7%AE%A1%E6%8E%A7%E6%96%B9%E6%A1%88/</link>
      <pubDate>Mon, 14 May 2018 14:07:52 +0000</pubDate>
      
      <guid>https://wangfy263.github.io/posts/%E5%9F%BA%E4%BA%8Evue%E7%9A%84%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%9D%83%E9%99%90%E7%AE%A1%E6%8E%A7%E6%96%B9%E6%A1%88/</guid>
      <description>基于vue的管理系统的权限管控方案 近期在做后台管理系统，前端是vue + vue-router + vuex + webpack实现的spa应用；管理系统中有可视化编辑、工作流、运营数据、报表等不同的能力，需要开放给不同的用户角色使用，因此需要对菜单进行权限控制；
还有一些特殊的情况，由于运营数据和可视化配置是两个前端应用，展示效果是统一的，技术栈也相同（vue&amp;hellip;），但是需要统一进行登录和权限管理；（后期也可能会有更多这样的情况，如：报表系统）
最终想要达到的目标： 1. 不同用户登录后看到的菜单不同； 2. 多个前端系统的菜单统一 3. 系统内的菜单是路由访问，系统外的菜单使用外链跳转； 4. 即使用户保存了前端路由，没有权限也无法访问；
设计方案 时序图 登录和权限管理我们有现成的产品，CAS+基础域；集成CAS后，即可通过基础域来管理角色和权限；因此方案是根据CAS和基础域来设计的； * 首先，前端需要获取到当前登录的用户和权限；登录后，后端的session中是保存有用户信息和权限信息的，需要增加一个接口为前端返回这些信息； * 第二：菜单需要根据权限信息展示，而基础域返回的权限信息只有url；因此需要现有全量的菜单，再根据权限做交集处理；最开始计划全量菜单写在前端工程里，但后续增加菜单需要在每个系统都做一次修改，不合理；基础域中导航管理模块的数据结构正好能满足要求，计划将菜单通过基础域配置，提供接口返回给前端使用，这样的话菜单也可以通过可视化配置，避免了频繁的开发上线； * 第三：区分路由还是外链，在配置时统一配置完整的url，包含请求路径和hash值，在每个前端系统中配置自己的上下文，查询出的菜单与当前系统的上下文相同时，即为内部访问路由；如果不相同则表示外链 * 第四：VUE路由通过权限信息来生成，没有权限则没有路由，即使之前保存了路由也无法访问；保证了安全性； 在具体实现过程中，踩了不少坑，下面我将详细讲述下实现过程中的关键点：
集成CAS 登录的部分采用现有的CAS产品；CAS是SpringMVC架构实现的单点登录应用，有独立的登录界面，通过在目标应用的web.xml中配置过滤器、集成jar包的方式，在目标应用收到请求时，向CAS系统发起验证登录请求，如未登录则拦截请求，重定向至CAS登录界面；
在前后端分离的项目中，请求前端工程时，需要前端主动发起请求，判断登录状态，如未登录由前端重定向至CAS登录界面（后端返回指定错误码）；
在前端应用加载时就发起请求验证登录状态，可以在main.js中进行；如果未登录重定向至登录界面；
axios({method: &amp;#39;post&amp;#39;, url: &amp;#39;/y/adm/market/sso/asynchronLoginCheckServlet&amp;#39;, data: {}}).then(({ data }) =&amp;gt; { if (data.code === &amp;#39;009999&amp;#39;) { window.location.href = config.domain + &amp;#39;/cas/login?service=&amp;#39; + config.retDom + &amp;#39;/market/sso/asynchronLoginResServlet?page=&amp;#39; + window.location.origin + &amp;#39;/y/adm/market/index.html&amp;#39;; } }) 菜单初始化 权限信息获取 登录成功后，后端应用的session中会保存当前登录用户的基本信息和权限信息；后端提供接口，在登录成功后获取session中的信息，数据结构如下：
{ &amp;#34;data&amp;#34;: { &amp;#34;authority&amp;#34;:[], //url权限列表 &amp;#34;contactPhone&amp;#34;:&amp;#34;13934900000&amp;#34;, &amp;#34;loginNo&amp;#34;:&amp;#34;admin&amp;#34; //登录账号 }, &amp;#34;retCode&amp;#34;:&amp;#34;0000&amp;#34;, &amp;#34;retMsg&amp;#34;:&amp;#34;OK&amp;#34; } 菜单列表查询 采用基础域的权限模型</description>
    </item>
    
    <item>
      <title>基于vue的埋点方案</title>
      <link>https://wangfy263.github.io/posts/%E5%9F%BA%E4%BA%8Evue%E7%9A%84%E5%9F%8B%E7%82%B9%E6%96%B9%E6%A1%88/</link>
      <pubDate>Mon, 07 May 2018 08:59:01 +0000</pubDate>
      
      <guid>https://wangfy263.github.io/posts/%E5%9F%BA%E4%BA%8Evue%E7%9A%84%E5%9F%8B%E7%82%B9%E6%96%B9%E6%A1%88/</guid>
      <description>buried-point基于vue的埋点方案 安装Install npm install buried-point 配置configuration main.js中进行如下配置：  import BuriedPoint from &amp;lsquo;buried-point&amp;rsquo;
let option = { router: router, //vue路由对象 domain: &amp;lsquo;127.0.0.1:18080&amp;rsquo;, //埋点服务器地址 path: &amp;lsquo;/nresource/dcsImg&amp;rsquo; //埋点请求路径 /nresource/dcsImg/dcs.log } Vue.use(BuriedPoint, option)

开始使用start  1.v-ready-stat指令，用于采集页面加载完成时数据 在需要采集数据的vue组件根节点上声明埋点指令v-ready-stat
  &amp;lt;template&amp;gt; &amp;lt;div class=&#34;button-content&#34; v-ready-stat&amp;gt; &amp;lt;/template&amp;gt;   如果需要在页面加载时传递数据，v-ready-stat指令可以接收json格式的参数{&#39;SI.si_n&#39;:&#39;WEB&#39;, &#39;SI.si_x&#39;:&#39;002&#39;}
  &amp;lt;div class=&#34;icon-content&#34; v-ready-stat=&#34;{&#39;SI.si_n&#39;:&#39;xxx&#39;,&#39;SI.si_x&#39;:&#39;009&#39;}&#34;&amp;gt;   2.v-click-stat指令，用于采集用户点击事件的数据 在被点击的dom节点上声明埋点指令v-click-stat,数据格式{&#39;SI.si_n&#39;:&#39;WEB&#39;, &#39;SI.si_x&#39;:&#39;002&#39;}
  &amp;lt;el-button type=&#34;text&#34; v-data-stat=&#34;{&#39;SI.si_n&#39;:&#39;WEB&#39;, &#39;SI.si_x&#39;:&#39;002&#39;}&#34;&amp;gt;{{message}}&amp;lt;/el-button&amp;gt;   3.命令式采集业务码 针对需要在业务逻辑中进行埋点的特殊场景，提供命令式埋点方案； 在vue组件中需要import埋点插件import bp from &#39;buried-Point&#39;,在需要埋点的位置调用埋点方法bp.dcsMultiTrack(&#39;SI.si_n&#39;, &#39;WEB_Q&#39;, &#39;SI.</description>
    </item>
    
  </channel>
</rss>